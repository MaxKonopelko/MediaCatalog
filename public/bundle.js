(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
    'use strict';

    var BrowserStorage = (function () {
        function BrowserStorage(key) {
            this.key = key;
        }
        BrowserStorage.prototype.setObject = function (value) {
            var str = JSON.stringify(value);
            localStorage.setItem(this.key, str);
        };
        BrowserStorage.prototype.getObject = function () {
            var item = localStorage.getItem(this.key);
            return JSON.parse(item);
        };
        BrowserStorage.prototype.clear = function () {
            localStorage.removeItem(this.key);
        };
        BrowserStorage.prototype.clearAll = function () {
            localStorage.clear();
        };
        return BrowserStorage;
    }());

    var StorageService = (function () {
        function StorageService(key) {
            this.browserStorage = new BrowserStorage(key);
        }
        StorageService.prototype.addArray = function (items) {
            var storage = this.browserStorage.getObject();
            if (storage === null) {
                var storageObj = {
                    index: 0,
                    list: [],
                };
                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    item.id = storageObj.index;
                    storageObj.list.push(item);
                    storageObj.index++;
                }
                this.browserStorage.setObject(storageObj);
                console.log(storageObj);
            }
            else {
                for (var _a = 0, items_2 = items; _a < items_2.length; _a++) {
                    var item = items_2[_a];
                    if (item.id === (undefined)) {
                        item.id = storage.index;
                        storage.list.push(item);
                        storage.index++;
                    }
                }
                this.browserStorage.setObject(storage);
                console.log(storage);
            }
        };
        StorageService.prototype.getObj = function () {
            var browserStorageData = this.browserStorage.getObject();
            return browserStorageData ? browserStorageData.list : [];
        };
        StorageService.prototype.clear = function () {
            this.browserStorage.clear();
        };
        return StorageService;
    }());

    var ImageServiceClass = (function () {
        function ImageServiceClass() {
            this.storage = new StorageService('image');
        }
        ImageServiceClass.prototype.add = function (item) {
            var imageList = this.storage.getObj();
            imageList.push(item);
            this.storage.addArray(imageList);
        };
        ImageServiceClass.prototype.addArray = function (items) {
            var imageList = this.storage.getObj();
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var image = items_1[_i];
                imageList.push(image);
            }
            this.storage.addArray(imageList);
        };
        ImageServiceClass.prototype.clear = function () {
            this.storage.clear();
        };
        return ImageServiceClass;
    }());
    var ImageService = new ImageServiceClass();

    function __decorate$1(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function Component(target) {
        var newConstructor = function () {
            this.template = function () {
                var _this = this;
                setTimeout(function () {
                    if (typeof target.prototype.onInit === 'function') {
                        target.prototype.onInit.call(_this);
                    }
                }, 1);
                return target.prototype.template.call(this);
            };
        };
        newConstructor.prototype = target.prototype;
        return newConstructor;
    }

    var ImagesComponent = (function () {
        function ImagesComponent() {
        }
        ImagesComponent.prototype.onInit = function () {
            console.warn('onInit');
            document.getElementById('form-image')
                .addEventListener('submit', this.handleSubmit);
        };
        ImagesComponent.prototype.handleSubmit = function (event) {
            event.preventDefault();
            console.warn('AAAAAA1');
        };
        ImagesComponent.prototype.template = function () {
            return " \n            <div class=\"photo-header\">Photo</div>\n            <div class=\"photo-data\">\n                <div class=\"url-photo\">\n                    <div>\n                        <form id=\"form-image\">\n                              <!--<label for=\"fname\">URL IMAGE </label>-->\n                              <input type=\"text\" id=\"url-photo\" value=\"\" placeholder=\"Url image..\">\n                              <input type=\"submit\" id=\"submit\" \">\n                        </form>\n                    </div>\n\n               </div>             \n                <div class=\"photo-content\">\n                     <div class=\"photo-list\">\n                           <ol class=\"photos\" id=\"photos\">\n                                                           \n                           </ol>                                                \n                     </div>\n                     <div class=\"photo\">\n                        <div class=\"photo-size\">                                       \n                            <img class=\"image\" id=\"image\" src=\"http://placehold.it/350x350\">\n                        </div>\n                     </div>\n                </div>\n            </div>\n    ";
        };
        ImagesComponent = __decorate$1([
            Component
        ], ImagesComponent);
        return ImagesComponent;
    }());

    var MusicsComponent = (function () {
        function MusicsComponent() {
        }
        MusicsComponent.prototype.template = function () {
            return "\n            <div class=\"music-header\">Name track</div>\n            <div class=\"music-data\">\n                <div class=\"music-list\">\n                    <div class=\"track-list\">1</div>\n                    <div class=\"track-list\">2</div>\n                    <div class=\"track-list\">3</div>\n                    <div class=\"track-list\">4</div>\n                    <div class=\"track-list\">5</div>\n                    <div class=\"track-list\">6</div>\n                    <div class=\"track-list\">7</div>\n                </div>\n                <div class=\"music-content\">\n                    <div class=\"music-image\">\n                        <img src=\"images/guf.jpg\">\n                    </div>\n                    <div class=\"music-author\">Name : Guf</div>\n                    <div class=\"music-name\">Track name : Azino777</div>\n                    <div class=\"music-play\">\n                        <audio controls>\n                            <source type=\"audio/mpeg\" src=\"images/142.mp3\">\n                        </audio>\n                    </div>\n\n                </div>\n            </div>\n    ";
        };
        return MusicsComponent;
    }());

    var FilmsComponent = (function () {
        function FilmsComponent() {
        }
        FilmsComponent.prototype.template = function () {
            return "\n        <div class=\"film-header\">Films</div>\n        <div class=\"film-data\"></div>\n    ";
        };
        return FilmsComponent;
    }());

    var AppComponent = (function () {
        function AppComponent() {
            var _this = this;
            this.imagesComponent = new ImagesComponent();
            this.musicsComponent = new MusicsComponent();
            this.filmsComponent = new FilmsComponent();
            this.components = [this.imagesComponent, this.musicsComponent, this.filmsComponent];
            var buttons = document.getElementsByClassName('b1');
            var _loop_1 = function (i) {
                buttons[i].addEventListener('click', function () {
                    _this.render(i);
                });
            };
            for (var i = 0; i < buttons.length; i++) {
                _loop_1(i);
            }
        }
        AppComponent.prototype.render = function (index) {
            document.getElementById('content').innerHTML = this.components[index].template();
        };
        return AppComponent;
    }());

    var component = new AppComponent();
    component.render(0);
    ImageService.clear();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
